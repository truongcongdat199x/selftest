name: GitHub Action build and push image to ECR
on:
  push:
    branches:
      - "main"
      - "dev"
      - "ft/ecr"

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
env:
    Pass: '10-Aug-2023'

permissions:
    id-token: write   # This is required for requesting the JWT
    contents: read    # This is required for actions/checkout   

jobs:
  job1:
    name: Build and push image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials  # Need test v2 and note
        uses: aws-actions/configure-aws-credentials@v3 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::910760619310:role/gh-actions-role
          aws-region: ap-northeast-1
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1  #v1 test done but it show warning, need to test v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ap-northeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Load secrets and save to app.env #test ok
        run: aws secretsmanager get-secret-value --secret-id pro/test --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: demoapp
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Update kube config
        run: aws eks update-kubeconfig --name simple-bank --region ap-northeast-1

      - name: Deploy image to Amazon EKS
        run: |
          kubectl get ns
          kubectl get no